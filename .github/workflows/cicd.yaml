name: CI_CD Workflow

on:
  push:
    branches:
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop

jobs:
    # Step 1: Review Static CodeQL 
    codeql-analysis:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Initialize CodeQL
          uses: github/codeql-action/init@v3
          with:
            languages: 'javascript'
        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v3
          with:
            output: codeql-results/

        - name: List generated files
          run: ls -R

        - name: Upload CodeQL results
          if: success() && contains(github.workspace, 'codeql-results')
          uses: actions/upload-artifact@v4
          with:
            name: codeql-results
            path: codeql-results/
    #Step 2 Dependency Validation
    dependency-check:
        runs-on: ubuntu-latest
        needs: codeql-analysis
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '16'
          - name: Install dependencies
            run: npm install
          - name: Run npm audit
            run: npm audit --audit-level=high

  # Step 3: Execution Unit Testing
    unit-tests:
        runs-on: ubuntu-latest
        needs: dependency-check
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '16'
          - name: Install dependencies
            run: npm install

          - name: Run unit tests
            run: npm test || echo "Unit tests failed. Check logs for details."

          - name: Build project
            run: npm run build

          - name: Create dist directory
            run: mkdir -p dist
          - name: Package artifacts
            run: zip -r app.zip dist/

          - name: Validate artifact
            run: test -f app.zip || (echo "Artifact not found!" && exit 1)

          - name: Upload artifacts
            uses: actions/upload-artifact@v4
            with:
              name: packaged-app
              path: app.zip
    #Step 4: Build and deploy
    build-and-deploy-development:
      runs-on: ubuntu-latest
      needs: unit-tests
      if: github.ref == 'refs/heads/develop'
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Authenticate to Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}

        - name: Set up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v1
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}

           # Step 4.3: Authentication with Google Container Registry (GCR)
        - name: Authenticate Docker with GCR
          run: gcloud auth configure-docker us-central1-docker.pkg.dev
        - name: Build Docker image
          run: docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devsecops-dev/${{ vars.name_app}}:latest .
        - name: Push Docker image to GCR
          run: docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devsecops-dev/${{ vars.name_app}}:latest

          #Step 4: Build and deploy
    build-and-deploy-production:
      runs-on: ubuntu-latest
      needs: unit-tests
      if: github.ref == 'refs/heads/main'
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Authenticate to Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}

        - name: Set up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v1
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}

           # Step 4.3: Authentication with Google Container Registry (GCR)
        - name: Authenticate Docker with GCR
          run: gcloud auth configure-docker us-central1-docker.pkg.dev
        - name: Build Docker image
          run: docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devsecops/${{ vars.name_app}}:latest .
        - name: Push Docker image to GCR
          run: docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devsecops/${{ vars.name_app}}:latest
